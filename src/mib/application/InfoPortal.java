/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib.application;

import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.JOptionPane;
import java.util.*;
import java.text.SimpleDateFormat;
import java.text.DateFormat;

/**
 *
 * @author anton
 */
public class InfoPortal extends javax.swing.JFrame {

    private static InfDB idb;
    private static String id;
    private AgentMeny agentMeny;
    private ArrayList<String> valjInfo;
    private String info;
    
    /**
     * Creates new form InfoPortal
     */
    public InfoPortal(InfDB idb, String id) {
        initComponents();
        this.idb = idb;
        this.id = id;
       
        idRasBox.removeAllItems();
        try{
        ArrayList<String> valjInfo = new ArrayList<>();
        valjInfo.add("Välj information du vill se");
        valjInfo.add("Se utomjordingar i område");
        valjInfo.add("Se utomjordingar per ras");
        valjInfo.add("Se utomjordingar som registrerats under en period");
        valjInfo.add("Se all information om en utomjording");
        valjInfo.add("Se vem som är områdeschef för ett områdeskontor");
        valjInfo.add("Se statistik för ansvarande agenter");
        valjInfo.add("Se utkvitterad utrustning");
        for(String dennaInfo: valjInfo){
            valBox.addItem(dennaInfo);
        }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Något gick fel");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        infoFalt = new javax.swing.JTextArea();
        idRasBox = new javax.swing.JComboBox<>();
        valBox = new javax.swing.JComboBox<>();
        datum1 = new com.toedter.calendar.JDateChooser();
        datum2 = new com.toedter.calendar.JDateChooser();
        sokKnapp = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        goBack = new javax.swing.JLabel();
        lblMIB = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoFalt.setBackground(new java.awt.Color(0, 0, 0));
        infoFalt.setColumns(20);
        infoFalt.setForeground(new java.awt.Color(255, 255, 255));
        infoFalt.setRows(5);
        jScrollPane1.setViewportView(infoFalt);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 290, 200));

        idRasBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idRasBoxActionPerformed(evt);
            }
        });
        getContentPane().add(idRasBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 260, -1));

        valBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valBoxActionPerformed(evt);
            }
        });
        getContentPane().add(valBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 260, -1));
        getContentPane().add(datum1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, 260, -1));
        getContentPane().add(datum2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 260, 20));

        sokKnapp.setBackground(new java.awt.Color(0, 0, 0));
        sokKnapp.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 153, 255), 2, true));
        sokKnapp.setForeground(new java.awt.Color(102, 153, 255));
        sokKnapp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sokKnapp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sokKnappMouseReleased(evt);
            }
        });
        sokKnapp.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/design/accept.png"))); // NOI18N
        sokKnapp.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 20, 20));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 153, 255));
        jLabel1.setText("Sök");
        sokKnapp.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 60, 30));

        getContentPane().add(sokKnapp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 110, 30));

        goBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/design/GoBack.png"))); // NOI18N
        goBack.setToolTipText("");
        goBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                goBackMouseReleased(evt);
            }
        });
        getContentPane().add(goBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblMIB.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        lblMIB.setForeground(new java.awt.Color(255, 255, 255));
        lblMIB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMIB.setText("Informationsportal");
        lblMIB.setToolTipText("");
        getContentPane().add(lblMIB, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 740, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/design/spaceBlue.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void valBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valBoxActionPerformed
        /*
        Denna kod hanterar vad som ska ske beroende på valen som görs av användaren i första drop-down-menyn
        */
                
        this.info = (String)valBox.getSelectedItem();
        try{
            if(info.equals(null)){
            }
            else if(info.equals("Välj information du vill se")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(false);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
            }
            else if(info.equals("Se utomjordingar i område")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(true);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
                alienPlats();
            }
            else if(info.equals("Se utomjordingar per ras")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(true);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
                alienRas();                
            }
            else if(info.equals("Se utomjordingar som registrerats under en period")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(false);
                datum1.setEnabled(true);
                datum2.setEnabled(true);
            }
            else if(info.equals("Se all information om en utomjording")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(true);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
                alienId();
            }
            else if(info.equals("Se vem som är områdeschef för ett områdeskontor")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(true);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
                alienPlats();
            }
            else if(info.equals("Se statistik för ansvarande agenter")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(true);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
                alienPlats();
            }
            else if(info.equals("Se utkvitterad utrustning")){
                idRasBox.removeAllItems();
                idRasBox.setEnabled(false);
                datum1.setEnabled(false);
                datum2.setEnabled(false);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Något gick fel");
        }
    }//GEN-LAST:event_valBoxActionPerformed

    private void idRasBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idRasBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idRasBoxActionPerformed

    private void sokKnappMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sokKnappMouseReleased
        infoFalt.selectAll();
        infoFalt.replaceSelection("");
        
        //If sats för att se vilka aliens som finns i ett specifikt område
        if(info.equals("Se utomjordingar i område")){
            String omrade = (String)idRasBox.getSelectedItem(); 
            try{
                String oid = idb.fetchSingle("SELECT Omrades_ID FROM omrade WHERE Benamning='" + omrade + "'");
                ArrayList<String> omradeAlien = idb.fetchColumn("SELECT Alien_ID FROM alien WHERE Plats=" + oid);
                
                for(String dennaAlien: omradeAlien){
                    String alienNamn = idb.fetchSingle("SELECT Namn FROM alien Where Alien_ID=" + dennaAlien);
                    infoFalt.insert(alienNamn + "\n", 0);                                       
                }
            }            
            catch(InfException e){
                    JOptionPane.showMessageDialog(null, "Något gick fel");
                    }
        }
        //if-else för att se vilka aliens som tillhör en viss ras
        else if(info.equals("Se utomjordingar per ras")){
            String ras = (String)idRasBox.getSelectedItem();
            try{
                ArrayList<String> rasAlien = idb.fetchColumn("SELECT Alien_ID FROM " + ras);
                for(String dennaAlien: rasAlien){
                    String alienNamn = idb.fetchSingle("SELECT Namn FROM alien Where Alien_ID=" + dennaAlien);
                    infoFalt.insert(alienNamn + "\n", 0);
                }
            }            
            catch(InfException e){
                JOptionPane.showMessageDialog(null, "Något gick fel");
            }
        }
        //If-else för att se vilka utomjordingar som registrerats mellan olika datum
        else if(info.equals("Se utomjordingar som registrerats under en period")){          
            Date startDatum = datum1.getDate();           
            Date slutDatum = datum2.getDate();
            HashMap<String,String> regDatum = new HashMap<String,String>();
            if(Validering.datumHarVarde(slutDatum) && Validering.datumHarVarde(startDatum)){
            try{
                ArrayList<String> aid = idb.fetchColumn("SELECT Alien_ID From alien");
                for(int i=0; i<aid.size();i++){
                    String datum = idb.fetchSingle("SELECT Registreringsdatum FROM alien where Alien_ID=" + aid.get(i));
                    regDatum.put(aid.get(i), datum);
                }
                for(Map.Entry<String, String> mapEntry: regDatum.entrySet()){
                    String key = mapEntry.getKey();
                    String value = mapEntry.getValue();
                    Date regDate = new SimpleDateFormat("yyyy-MM-dd").parse(value);
                    if(regDate.after(startDatum) && regDate.before(slutDatum)){
                        String namn = idb.fetchSingle("SELECT Namn FROM alien where Alien_ID=" + key);
                        infoFalt.insert(namn + ": " + value + "\n", 0);
                    }
                }
                infoFalt.insert("Dessa utomjordingar registrerades mellan de angivna datumen:" + "\n", 0);
                
            }            
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Något gick fel");
            }
            }
        }
        //If-else för att se all information om en specifik alien
        else if(info.equals("Se all information om en utomjording")){
            String alien = (String)idRasBox.getSelectedItem();
            try{
                String aid = idb.fetchSingle("SELECT Alien_ID FROM alien WHERE Namn='" + alien + "'");
                HashMap<String, String> alienInfo = idb.fetchRow("SELECT Alien_ID AS 'Alien ID', Registreringsdatum, Losenord AS 'Lösenord', Namn, Telefon, Plats, Ansvarig_Agent AS 'Kontaktagent' FROM alien WHERE Alien_ID=" + aid); 
                for(Map.Entry<String,String> map: alienInfo.entrySet()){
                    String key = map.getKey();
                    String value = map.getValue();
                    infoFalt.insert(key + ": " + value + "\n", 0);
                }
            }
            catch(InfException e){
                JOptionPane.showMessageDialog(null, "Något gick fel");
                }    
        }
        //If else för att se vem som är områdeschef
        else if(info.equals("Se vem som är områdeschef för ett områdeskontor")){
            String omrade = (String)idRasBox.getSelectedItem();
            try{
                String oid = idb.fetchSingle("SELECT Omrades_ID FROM omrade WHERE Benamning='" + omrade + "'");
                String chefOmrade = idb.fetchSingle("SELECT Agent_ID FROM omradeschef where Omrade=" + oid);
                String chefNamn = idb.fetchSingle("SELECT Namn FROM agent where Agent_ID=" + chefOmrade);
                infoFalt.insert("Namn: " + chefNamn + "\n", 0);
                infoFalt.insert("Agent ID: " + chefOmrade +  "\n", 0);
                infoFalt.insert("Områdeschefen är:" + "\n", 0);
            }
                catch(InfException e){
                JOptionPane.showMessageDialog(null, "Något gick fel");
            }
        }
        //if else för att se de agenter som ansvarar över flest aliens
        else if(info.equals("Se statistik för ansvarande agenter")){
            String omrade = (String)idRasBox.getSelectedItem();
            try{        
                String oid = idb.fetchSingle("SELECT Omrades_ID FROM omrade WHERE Benamning='" + omrade + "'");
                ArrayList<HashMap<String,String>> topAgenter = idb.fetchRows("SELECT Ansvarig_Agent, COUNT(*) AS Antal FROM alien WHERE Plats=" + oid + " GROUP BY Ansvarig_Agent ORDER BY Antal ASC LIMIT 3");
                for(HashMap<String,String> map: topAgenter){
                    for(Map.Entry<String,String> lista: map.entrySet()){
                        String key = lista.getKey();
                        String value = lista.getValue();                        
                        if(key.equals("Ansvarig_Agent")){
                            String agentNamn = idb.fetchSingle("SELECT Namn FROM agent WHERE Agent_ID=" + value);
                            infoFalt.insert(agentNamn + ": ", 0);
                        }
                        else if(key.equals("Antal")){
                            if(value.equals("1")){
                                infoFalt.insert("Ansvarar över " + value + " utomjording \n", 0);
                            }
                            else{
                                infoFalt.insert("Ansvarar över " + value + " utomjordingar \n", 0);
                            }
                        }                      
                    }
                }
            }
                        
            catch(InfException e){
                JOptionPane.showMessageDialog(null, "Något gick fel");
            }
        }
        //else if för att se vilken utrustning agenten har kvitterat ut just nu
        else if(info.equals("Se utkvitterad utrustning")){
            try{
                ArrayList<String> lanadUtrustning = idb.fetchColumn("SELECT Utrustnings_ID FROM innehar_utrustning WHERE Agent_ID=" + id);
                if(lanadUtrustning.isEmpty()){
                    infoFalt.insert("Du har ingen utkvitterad utrustning\n", 0);
                }
                else{
                    for(String utrustning: lanadUtrustning){
                        String utrustNamn = idb.fetchSingle("SELECT Benamning FROM utrustning WHERE Utrustnings_ID=" + utrustning);
                        infoFalt.insert(utrustNamn + "\n", 0);
                }
                    infoFalt.insert("Din utkvitterad utrustning består av:\n", 0);
                }
            }
            
            catch(InfException e){
                JOptionPane.showMessageDialog(null, "Något gick fel");
            }
        }
    }//GEN-LAST:event_sokKnappMouseReleased

    private void goBackMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goBackMouseReleased
        /*
        Kollar adminstatus för den inloggade agenten, för att veta vilken huvudmeny användaren 
        ska skickas tillbaka till vid anvädning av "tillbaka"-knappen
        */
        
        try {
            String arAdmin = idb.fetchSingle("SELECT Administrator FROM agent WHERE Agent_ID=" + id);
        
            if(arAdmin.equals("N")){
                agentMeny = new AgentMeny(idb, id);
                agentMeny.setVisible(true);
                dispose();
            }
            else if(arAdmin.equals("J")){
                new HuvudmenyAdmin(idb, id).setVisible(true);
                dispose();
            }
        } 
        catch (InfException ex) {
            System.out.println("Något gick fel");
        } 
    }//GEN-LAST:event_goBackMouseReleased

    public void alienPlats(){
        ArrayList<String> omraden = new ArrayList<>();
        try{
            omraden = idb.fetchColumn("SELECT Omrades_ID FROM omrade ORDER BY Omrades_ID ASC");
            for(String dettaOmrade: omraden){
                String omradeNamn = idb.fetchSingle("SELECT Benamning FROM omrade WHERE Omrades_ID=" + dettaOmrade);
                idRasBox.addItem(omradeNamn);
            }
        }       
        catch(InfException e){
        JOptionPane.showMessageDialog(null, "Något gick fel");
        }
    }
    
    public void alienRas(){
        ArrayList<String> raser = new ArrayList<>();
        raser.add("boglodite");
        raser.add("squid");
        raser.add("worm");
        for(String dennaRas: raser){
            idRasBox.addItem(dennaRas);
        }
    }
    
    public void alienId(){
        
        //Hämtar kolumnen med alien-ID från alien-tabellen i databasen och lägger det i en arraylist
        ArrayList<String> idAlien = new ArrayList<>();
        try{
            idAlien = idb.fetchColumn("SELECT Alien_ID FROM alien ORDER BY Alien_ID ASC");
            
            // For each loop för att lista namn på aliens
            for(String dettaId: idAlien){
                String AlienNamn = idb.fetchSingle("SELECT Namn FROM alien WHERE Alien_ID=" + dettaId);
                idRasBox.addItem(AlienNamn);
            }
        }        
        catch(InfException e){
            JOptionPane.showMessageDialog(null, "Något gick fel");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser datum1;
    private com.toedter.calendar.JDateChooser datum2;
    private javax.swing.JLabel goBack;
    private javax.swing.JComboBox<String> idRasBox;
    private javax.swing.JTextArea infoFalt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMIB;
    private javax.swing.JPanel sokKnapp;
    private javax.swing.JComboBox<String> valBox;
    // End of variables declaration//GEN-END:variables
}
